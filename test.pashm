# test comment

$hello = "Hello, World!\n"
print($hello) # hi there

func hello(string $name)
	return 'hello ' + $name
endfunc

if null is None
endif

println int, string, str, integer, bool, list, array, float, tuple, dict
'hello' + "hello"
@doc "hello world"
class Person
	func string::get_name()
		return $this->name
	endfunc
endclass

println Person->__docstring__

if True, null, false, False, true, None
	# something
else
elif
endif

# TODO : FIXME

import @foo
import @foo.bar
import 'something'
import_once 'something'
import_run 'something'
import_run_once 'something'
raise Error('Foo', 'bar')

namespace foo
	ns bar
	endns
endnamespace

use foo

print('something')
println('something')
printl('something')
perror('something')
printf('something')

define()
is_defined()
redefine()
all_defines()
undefine()

println clone($something)

get()
set()
gget()
gset()

section something
goto something
mem true; gotoif something

assert true

break
continue

pass

if and or not in
endif

register_shutdown()
python('foo')
eval('foo')
py_load_file()
py_load_module()

println 'hello \' and \" bye' + 'other str'

out_start()
out_end()
out_clean()
out_get_clean()
out_get()

func.delete()
func.exists()
func.list()
class.delete()
class.exists()
class.list()

var_dump()
die()
system('ls')
isset('foo')
read()
exit()
typeof($var)
__namespace__()
match()

println """hello"""

$name.other = 'hello'

println 'the # comment'
